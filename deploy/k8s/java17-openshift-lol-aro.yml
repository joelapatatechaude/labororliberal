---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: rest-labors
    application: labors-service
    system: quarkus-elections
  name: rest-labors-config
data:
  quarkus.hibernate-orm.database.generation: validate
  quarkus.hibernate-orm.sql-load-script: no-file
  quarkus.datasource.jdbc.url: jdbc:otel:postgresql://labors-db:5432/villains_database
  quarkus.opentelemetry.tracer.exporter.otlp.endpoint: http://otel-collector:4317
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    app: rest-labors
    application: labors-service
    system: quarkus-elections
  name: rest-labors-config-creds
data:
  quarkus.datasource.username: c3VwZXJiYWQ=
  quarkus.datasource.password: c3VwZXJiYWQ=
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    app: labors-db
    application: labors-service
    system: quarkus-elections
  name: labors-db-config
data:
  POSTGRESQL_DATABASE: dmlsbGFpbnNfZGF0YWJhc2U=
  POSTGRESQL_USERNAME: c3VwZXJiYWQ=
  POSTGRESQL_PASSWORD: c3VwZXJiYWQ=
type: Opaque
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: labors-db
    application: labors-service
    system: quarkus-elections
  name: labors-db-init
data:
  get-data.sh: |-
    #!/bin/bash

    curl https://raw.githubusercontent.com/joelapatatechaude/labororliberal/main/rest-villains/deploy/db-init/initialize-tables.sql --output /docker-entrypoint-initdb.d/1-init-tables.sql
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: labors-db
    application: labors-service
    system: quarkus-elections
    app.kubernetes.io/part-of: labors-service
    app.openshift.io/runtime: postgresql
  name: labors-db
spec:
  replicas: 1
  selector:
    matchLabels:
      name: labors-db
  template:
    metadata:
      labels:
        application: labors-service
        name: labors-db
    spec:
      containers:
        - envFrom:
            - secretRef:
                name: labors-db-config
          image: bitnami/postgresql:14
          name: labors-db
          ports:
            - containerPort: 5432
          resources:
            limits:
              memory: 128Mi
            requests:
              memory: 32Mi
          volumeMounts:
            - mountPath: /bitnami/postgresql
              name: labors-db-data
            - mountPath: /docker-entrypoint-initdb.d
              name: labors-db-init-data
      initContainers:
        - command:
            - sh
            - get-data.sh
          image: registry.access.redhat.com/ubi8-minimal:8.6
          name: get-data
          volumeMounts:
            - mountPath: /docker-entrypoint-preinitdb.d
              name: labors-db-init
            - mountPath: /docker-entrypoint-initdb.d
              name: labors-db-init-data
          workingDir: /docker-entrypoint-preinitdb.d
      volumes:
        - emptyDir: {}
          name: labors-db-data
        - emptyDir: {}
          name: labors-db-init-data
        - configMap:
            name: labors-db-init
          name: labors-db-init
---
apiVersion: v1
kind: Service
metadata:
  labels:
    name: labors-db
    application: labors-service
    system: quarkus-elections
  name: labors-db
spec:
  ports:
    - port: 5432
      protocol: TCP
      targetPort: 5432
  selector:
    name: labors-db
  type: ClusterIP
---
apiVersion: image.openshift.io/v1
kind: ImageStream
metadata:
  annotations:
    app.openshift.io/vcs-url: https://github.com/joelapatatechaude/labororliberal
    app.openshift.io/connects-to: "labors-db,otel-collector"
    app.openshift.io/vcs-ref: main
    app.quarkus.io/build-timestamp: 2023-01-17 - 14:19:56 +0000
  labels:
    app: rest-labors
    application: labors-service
    system: quarkus-elections
    app.openshift.io/runtime: quarkus
    app.kubernetes.io/part-of: labors-service
    app.kubernetes.io/version: java17-latest
    app.kubernetes.io/name: rest-labors
  name: rest-labors
spec:
  lookupPolicy:
    local: false
  tags:
    - from:
        kind: DockerImage
        name: quay.io/rh_ee_cschmitz/lol-rest-labors:java11-latest
      importPolicy: {}
      name: java11-latest
      referencePolicy:
        type: Source
    - from:
        kind: DockerImage
        name: quay.io/rh_ee_cschmitz/lol-rest-labors:java17-latest
      importPolicy: {}
      name: java17-latest
      referencePolicy:
        type: Source
    - from:
        kind: DockerImage
        name: quay.io/rh_ee_cschmitz/lol-rest-labors:native-latest
      importPolicy: {}
      name: native-latest
      referencePolicy:
        type: Source
---
apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  annotations:
    prometheus.io/scheme: http
    app.openshift.io/vcs-url: https://github.com/joelapatatechaude/labororliberal
    app.openshift.io/connects-to: "labors-db,otel-collector"
    app.openshift.io/vcs-ref: main
    app.quarkus.io/build-timestamp: 2023-01-17 - 14:19:56 +0000
    prometheus.io/scrape: "true"
    prometheus.io/path: /q/metrics
    prometheus.io/port: "8084"
  labels:
    app.kubernetes.io/name: rest-labors
    app.kubernetes.io/part-of: labors-service
    app.kubernetes.io/version: java17-latest
    app: rest-labors
    application: labors-service
    system: quarkus-elections
    app.openshift.io/runtime: quarkus
  name: rest-labors
spec:
  replicas: 1
  selector:
    app.kubernetes.io/part-of: labors-service
    app.kubernetes.io/version: java17-latest
    app.kubernetes.io/name: rest-labors
  template:
    metadata:
      annotations:
        prometheus.io/scheme: http
        app.openshift.io/vcs-url: https://github.com/joelapatatechaude/labororliberal
        app.openshift.io/connects-to: "labors-db,otel-collector"
        app.openshift.io/vcs-ref: main
        app.quarkus.io/build-timestamp: 2023-01-17 - 14:19:56 +0000
        prometheus.io/scrape: "true"
        prometheus.io/path: /q/metrics
        prometheus.io/port: "8084"
      labels:
        app: rest-labors
        application: labors-service
        system: quarkus-elections
        app.openshift.io/runtime: quarkus
        app.kubernetes.io/part-of: labors-service
        app.kubernetes.io/version: java17-latest
        app.kubernetes.io/name: rest-labors
    spec:
      containers:
        - env:
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          envFrom:
            - secretRef:
                name: rest-labors-config-creds
            - configMapRef:
                name: rest-labors-config
          image: rest-labors:java17-latest
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /q/health/live
              port: 8084
              scheme: HTTP
            initialDelaySeconds: 0
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 10
          name: rest-labors
          ports:
            - containerPort: 8084
              name: http
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /q/health/ready
              port: 8084
              scheme: HTTP
            initialDelaySeconds: 0
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 10
          resources:
            limits:
              memory: 768Mi
            requests:
              memory: 256Mi
  triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
          - rest-labors
        from:
          kind: ImageStreamTag
          name: rest-labors:java17-latest
      type: ImageChange
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/scheme: http
    app.openshift.io/vcs-url: https://github.com/joelapatatechaude/labororliberal
    app.openshift.io/connects-to: "labors-db,otel-collector"
    app.openshift.io/vcs-ref: main
    app.quarkus.io/build-timestamp: 2023-01-17 - 14:19:56 +0000
    prometheus.io/scrape: "true"
    prometheus.io/path: /q/metrics
    prometheus.io/port: "8084"
  labels:
    app.kubernetes.io/name: rest-labors
    app.kubernetes.io/part-of: labors-service
    app.kubernetes.io/version: java17-latest
    app: rest-labors
    application: labors-service
    system: quarkus-elections
    app.openshift.io/runtime: quarkus
  name: rest-labors
spec:
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 8084
  selector:
    app.kubernetes.io/name: rest-labors
    app.kubernetes.io/part-of: labors-service
    app.kubernetes.io/version: java17-latest
  type: ClusterIP
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  annotations:
    app.openshift.io/vcs-url: https://github.com/joelapatatechaude/labororliberal
    app.openshift.io/connects-to: "labors-db,otel-collector"
    app.openshift.io/vcs-ref: main
    app.quarkus.io/build-timestamp: 2023-01-17 - 14:19:56 +0000
  labels:
    app.kubernetes.io/name: rest-labors
    app.kubernetes.io/part-of: labors-service
    app.kubernetes.io/version: java17-latest
    app: rest-labors
    application: labors-service
    system: quarkus-elections
    app.openshift.io/runtime: quarkus
  name: rest-labors
spec:
  port:
    targetPort: http
  tls:
    termination: edge
  to:
    kind: Service
    name: rest-labors
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: rest-liberals
    application: labors-service
    system: quarkus-elections
  name: rest-liberals-config
data:
  quarkus.hibernate-orm.database.generation: validate
  quarkus.hibernate-orm.sql-load-script: no-file
  quarkus.datasource.reactive.url: postgresql://liberals-db:5432/heroes_database
  quarkus.opentelemetry.tracer.exporter.otlp.endpoint: http://otel-collector:4317
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    app: rest-liberals
    application: labors-service
    system: quarkus-elections
  name: rest-liberals-config-creds
data:
  quarkus.datasource.username: c3VwZXJtYW4=
  quarkus.datasource.password: c3VwZXJtYW4=
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    app: liberals-db
    application: labors-service
    system: quarkus-elections
  name: liberals-db-config
data:
  POSTGRESQL_DATABASE: aGVyb2VzX2RhdGFiYXNl
  POSTGRESQL_USERNAME: c3VwZXJtYW4=
  POSTGRESQL_PASSWORD: c3VwZXJtYW4=
type: Opaque
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: liberals-db
    application: labors-service
    system: quarkus-elections
  name: liberals-db-init
data:
  get-data.sh: |-
    #!/bin/bash

    curl https://raw.githubusercontent.com/joelapatatechaude/labororliberal/main/rest-heroes/deploy/db-init/initialize-tables.sql --output /docker-entrypoint-initdb.d/1-init-tables.sql
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: liberals-db
    application: labors-service
    system: quarkus-elections
    app.kubernetes.io/part-of: liberals-service
    app.openshift.io/runtime: postgresql
  name: liberals-db
spec:
  replicas: 1
  selector:
    matchLabels:
      name: liberals-db
  template:
    metadata:
      labels:
        name: liberals-db
        application: labors-service
        system: quarkus-elections
    spec:
      containers:
        - envFrom:
            - secretRef:
                name: liberals-db-config
          image: bitnami/postgresql:14
          name: liberals-db
          ports:
            - containerPort: 5432
          resources:
            limits:
              memory: 128Mi
            requests:
              memory: 32Mi
          volumeMounts:
            - mountPath: /bitnami/postgresql
              name: liberals-db-data
            - mountPath: /docker-entrypoint-initdb.d
              name: liberals-db-init-data
      initContainers:
        - command:
            - sh
            - get-data.sh
          image: registry.access.redhat.com/ubi8-minimal:8.6
          name: get-data
          volumeMounts:
            - mountPath: /docker-entrypoint-preinitdb.d
              name: liberals-db-init
            - mountPath: /docker-entrypoint-initdb.d
              name: liberals-db-init-data
          workingDir: /docker-entrypoint-preinitdb.d
      volumes:
        - emptyDir: {}
          name: liberals-db-data
        - emptyDir: {}
          name: liberals-db-init-data
        - configMap:
            name: liberals-db-init
          name: liberals-db-init
---
apiVersion: v1
kind: Service
metadata:
  labels:
    name: liberals-db
    application: labors-service
    system: quarkus-elections
  name: liberals-db
spec:
  ports:
    - port: 5432
      protocol: TCP
      targetPort: 5432
  selector:
    name: liberals-db
  type: ClusterIP
---
apiVersion: image.openshift.io/v1
kind: ImageStream
metadata:
  annotations:
    app.openshift.io/vcs-url: https://github.com/joelapatatechaude/labororliberal
    app.openshift.io/connects-to: "liberals-db,otel-collector"
    app.openshift.io/vcs-ref: main
    app.quarkus.io/build-timestamp: 2023-01-17 - 14:20:14 +0000
  labels:
    app: rest-liberals
    application: labors-service
    system: quarkus-elections
    app.openshift.io/runtime: quarkus
    app.kubernetes.io/version: java17-latest
    app.kubernetes.io/part-of: liberals-service
    app.kubernetes.io/name: rest-liberals
  name: rest-liberals
spec:
  lookupPolicy:
    local: false
  tags:
    - from:
        kind: DockerImage
        name: quay.io/rh_ee_cschmitz/lol-rest-liberals:java11-latest
      importPolicy: {}
      name: java11-latest
      referencePolicy:
        type: Source
    - from:
        kind: DockerImage
        name: quay.io/rh_ee_cschmitz/lol-rest-liberals:java17-latest
      importPolicy: {}
      name: java17-latest
      referencePolicy:
        type: Source
    - from:
        kind: DockerImage
        name: quay.io/rh_ee_cschmitz/lol-rest-liberals:native-latest
      importPolicy: {}
      name: native-latest
      referencePolicy:
        type: Source
---
apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  annotations:
    prometheus.io/scheme: http
    app.openshift.io/vcs-url: https://github.com/joelapatatechaude/labororliberal
    app.openshift.io/connects-to: "liberals-db,otel-collector"
    app.openshift.io/vcs-ref: main
    app.quarkus.io/build-timestamp: 2023-01-17 - 14:20:14 +0000
    prometheus.io/scrape: "true"
    prometheus.io/path: /q/metrics
    prometheus.io/port: "8083"
  labels:
    app.kubernetes.io/name: rest-liberals
    app.kubernetes.io/part-of: liberals-service
    app.kubernetes.io/version: java17-latest
    app: rest-liberals
    application: labors-service
    system: quarkus-elections
    app.openshift.io/runtime: quarkus
  name: rest-liberals
spec:
  replicas: 1
  selector:
    app.kubernetes.io/version: java17-latest
    app.kubernetes.io/part-of: liberals-service
    app.kubernetes.io/name: rest-liberals
  template:
    metadata:
      annotations:
        prometheus.io/scheme: http
        app.openshift.io/vcs-url: https://github.com/joelapatatechaude/labororliberal
        app.openshift.io/connects-to: "liberals-db,otel-collector"
        app.openshift.io/vcs-ref: main
        app.quarkus.io/build-timestamp: 2023-01-17 - 14:20:14 +0000
        prometheus.io/scrape: "true"
        prometheus.io/path: /q/metrics
        prometheus.io/port: "8083"
      labels:
        app: rest-liberals
        application: labors-service
        system: quarkus-elections
        app.openshift.io/runtime: quarkus
        app.kubernetes.io/version: java17-latest
        app.kubernetes.io/part-of: liberals-service
        app.kubernetes.io/name: rest-liberals
    spec:
      containers:
        - env:
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          envFrom:
            - configMapRef:
                name: rest-liberals-config
            - secretRef:
                name: rest-liberals-config-creds
          image: rest-liberals:java17-latest
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /q/health/live
              port: 8083
              scheme: HTTP
            initialDelaySeconds: 0
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 10
          name: rest-liberals
          ports:
            - containerPort: 8083
              name: http
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /q/health/ready
              port: 8083
              scheme: HTTP
            initialDelaySeconds: 0
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 10
          resources:
            limits:
              memory: 768Mi
            requests:
              memory: 256Mi
  triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
          - rest-liberals
        from:
          kind: ImageStreamTag
          name: rest-liberals:java17-latest
      type: ImageChange
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/scheme: http
    app.openshift.io/vcs-url: https://github.com/joelapatatechaude/labororliberal
    app.openshift.io/connects-to: "liberals-db,otel-collector"
    app.openshift.io/vcs-ref: main
    app.quarkus.io/build-timestamp: 2023-01-17 - 14:20:14 +0000
    prometheus.io/scrape: "true"
    prometheus.io/path: /q/metrics
    prometheus.io/port: "8083"
  labels:
    app.kubernetes.io/name: rest-liberals
    app.kubernetes.io/part-of: liberals-service
    app.kubernetes.io/version: java17-latest
    app: rest-liberals
    application: labors-service
    system: quarkus-elections
    app.openshift.io/runtime: quarkus
  name: rest-liberals
spec:
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 8083
  selector:
    app.kubernetes.io/name: rest-liberals
    app.kubernetes.io/part-of: liberals-service
    app.kubernetes.io/version: java17-latest
  type: ClusterIP
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  annotations:
    app.openshift.io/vcs-url: https://github.com/joelapatatechaude/labororliberal
    app.openshift.io/connects-to: "liberals-db,otel-collector"
    app.openshift.io/vcs-ref: main
    app.quarkus.io/build-timestamp: 2023-01-17 - 14:20:14 +0000
  labels:
    app.kubernetes.io/name: rest-liberals
    app.kubernetes.io/part-of: liberals-service
    app.kubernetes.io/version: java17-latest
    app: rest-liberals
    application: labors-service
    system: quarkus-elections
    app.openshift.io/runtime: quarkus
  name: rest-liberals
spec:
  port:
    targetPort: http
  tls:
    termination: edge
  to:
    kind: Service
    name: rest-liberals
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: default_view
roleRef:
  kind: ClusterRole
  apiGroup: rbac.authorization.k8s.io
  name: view
subjects:
  - kind: ServiceAccount
    name: default
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: rest-elections
    application: elections-service
    system: quarkus-elections
  name: rest-elections-config
data:
  quarkus.liquibase-mongodb.migrate-at-start: "false"
  quarkus.mongodb.hosts: elections-db-aro:27017
  quarkus.stork.hero-service.service-discovery.type: kubernetes
  quarkus.stork.hero-service.service-discovery.application: rest-liberals
  quarkus.stork.hero-service.service-discovery.refresh-period: 1M
  quarkus.stork.villain-service.service-discovery.type: kubernetes
  quarkus.stork.villain-service.service-discovery.application: rest-labors
  quarkus.stork.villain-service.service-discovery.refresh-period: 1M
  quarkus.opentelemetry.tracer.exporter.otlp.endpoint: http://otel-collector:4317
  kafka.bootstrap.servers: PLAINTEXT://elections-kafka:9092
  mp.messaging.connector.smallrye-kafka.apicurio.registry.url: http://apicurio:8080/apis/registry/v2
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    app: rest-elections
    application: elections-service
    system: quarkus-elections
  name: rest-elections-config-creds
data:
  quarkus.mongodb.credentials.username: c3VwZXJmaWdodA==
  quarkus.mongodb.credentials.password: c3VwZXJmaWdodA==
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    app: elections-db-aro
    application: elections-service
    system: quarkus-elections
  name: elections-db-aro-config
data:
  MONGODB_DATABASE: ZmlnaHRz
  MONGODB_USERNAME: c3VwZXJmaWdodA==
  MONGODB_PASSWORD: c3VwZXJmaWdodA==
  MONGODB_ROOT_USER: c3VwZXI=
  MONGODB_ROOT_PASSWORD: c3VwZXI=
type: Opaque
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: elections-db-aro
    application: elections-service
    system: quarkus-elections
    app.kubernetes.io/part-of: elections-service
    app.openshift.io/runtime: mongodb
  name: elections-db-aro
spec:
  replicas: 1
  selector:
    matchLabels:
      name: elections-db-aro
  template:
    metadata:
      labels:
        application: elections-service
        name: elections-db-aro
        system: quarkus-elections
    spec:
      containers:
        - envFrom:
            - secretRef:
                name: elections-db-aro-config
          image: bitnami/mongodb:5.0
          name: elections-db-aro
          command:
            - mongod
            - "--replSet"
            - rs0
            - "--bind_ip"
            - "*"
          ports:
            - containerPort: 27017
          resources:
            limits:
              memory: 256Mi
            requests:
              memory: 64Mi
---
apiVersion: v1
kind: Service
metadata:
  labels:
    name: elections-db-aro
    application: elections-service
    system: quarkus-elections
  name: elections-db-aro
spec:
  ports:
    - port: 27017
      protocol: TCP
      targetPort: 27017
  selector:
    name: elections-db-aro
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: elections-kafka
    application: elections-service
    system: quarkus-elections
    app.kubernetes.io/part-of: elections-service
    app.openshift.io/runtime: amq
  name: elections-kafka
spec:
  replicas: 1
  selector:
    matchLabels:
      name: elections-kafka
  template:
    metadata:
      labels:
        application: elections-service
        name: elections-kafka
        system: quarkus-elections
    spec:
      containers:
        - command:
            - sh
            - -c
            - "export CLUSTER_ID=$(bin/kafka-storage.sh random-uuid) && bin/kafka-storage.sh\
              \ format -t ${CLUSTER_ID} -c config/kraft/server.properties && bin/kafka-server-start.sh\
              \ config/kraft/server.properties --override advertised.listeners=${KAFKA_ADVERTISED_LISTENERS}"
          env:
            - name: LOG_DIR
              value: /tmp/logs
            - name: KAFKA_ADVERTISED_LISTENERS
              value: PLAINTEXT://elections-kafka:9092
          image: quay.io/strimzi/kafka:0.28.0-kafka-3.1.0
          name: elections-kafka
          ports:
            - containerPort: 9092
          resources:
            limits:
              memory: 768Mi
            requests:
              memory: 128Mi
---
apiVersion: v1
kind: Service
metadata:
  labels:
    name: elections-kafka
    application: elections-service
    system: quarkus-elections
  name: elections-kafka
spec:
  ports:
    - port: 9092
      protocol: TCP
      targetPort: 9092
  selector:
    name: elections-kafka
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/path: /metrics
    prometheus.io/port: "8080"
    prometheus.io/scheme: http
  labels:
    app: apicurio
    application: elections-service
    system: quarkus-elections
    app.kubernetes.io/part-of: elections-service
    app.kubernetes.io/name: apicurio
    app.kubernetes.io/version: 2.2.3.Final
    app.openshift.io/runtime: apicurio
  name: apicurio
spec:
  replicas: 1
  selector:
    matchLabels:
      name: apicurio
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: /metrics
        prometheus.io/port: "8080"
        prometheus.io/scheme: http
      labels:
        application: elections-service
        name: apicurio
        system: quarkus-elections
    spec:
      containers:
        - env:
            - name: REGISTRY_AUTH_ANONYMOUS_READ_ACCESS_ENABLED
              value: "true"
          image: quay.io/apicurio/apicurio-registry-mem:2.2.3.Final
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /health/live
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 0
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 10
          name: apicurio
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /health/ready
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 0
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 10
          resources:
            limits:
              memory: 768Mi
            requests:
              memory: 128Mi
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/path: /metrics
    prometheus.io/port: "8080"
    prometheus.io/scheme: http
  labels:
    name: apicurio
    application: elections-service
    system: quarkus-elections
  name: apicurio
spec:
  ports:
    - port: 8080
      protocol: TCP
      targetPort: 8080
  selector:
    name: apicurio
  type: ClusterIP
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/path: /metrics
    prometheus.io/port: "8080"
    prometheus.io/scheme: http
  labels:
    app: apicurio
    application: elections-service
    system: quarkus-elections
    app.openshift.io/runtime: apicurio
  name: apicurio
spec:
  port:
    targetPort: 8080
  tls:
    termination: edge
  to:
    kind: Service
    name: apicurio
---
apiVersion: image.openshift.io/v1
kind: ImageStream
metadata:
  annotations:
    app.openshift.io/vcs-url: https://github.com/joelapatatechaude/labororliberal
    app.openshift.io/connects-to: "elections-db-aro,elections-kafka,apicurio,rest-labors,rest-liberals,otel-collector"
    app.openshift.io/vcs-ref: main
    app.quarkus.io/build-timestamp: 2023-01-17 - 14:20:35 +0000
  labels:
    app: rest-elections
    application: elections-service
    system: quarkus-elections
    app.openshift.io/runtime: quarkus
    app.kubernetes.io/part-of: elections-service
    app.kubernetes.io/version: java17-latest
    app.kubernetes.io/name: rest-elections
  name: rest-elections
spec:
  lookupPolicy:
    local: false
  tags:
    - from:
        kind: DockerImage
        name: quay.io/rh_ee_cschmitz/lol-rest-elections:java11-latest
      importPolicy: {}
      name: java11-latest
      referencePolicy:
        type: Source
    - from:
        kind: DockerImage
        name: quay.io/rh_ee_cschmitz/lol-rest-elections:java17-latest
      importPolicy: {}
      name: java17-latest
      referencePolicy:
        type: Source
    - from:
        kind: DockerImage
        name: quay.io/rh_ee_cschmitz/lol-rest-elections:native-latest
      importPolicy: {}
      name: native-latest
      referencePolicy:
        type: Source
---
apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  annotations:
    prometheus.io/scheme: http
    app.openshift.io/vcs-url: https://github.com/joelapatatechaude/labororliberal
    app.openshift.io/connects-to: "elections-db-aro,elections-kafka,apicurio,rest-labors,rest-liberals,otel-collector"
    app.openshift.io/vcs-ref: main
    app.quarkus.io/build-timestamp: 2023-01-17 - 14:20:35 +0000
    prometheus.io/scrape: "true"
    prometheus.io/path: /q/metrics
    prometheus.io/port: "8082"
  labels:
    app.kubernetes.io/name: rest-elections
    app.kubernetes.io/part-of: elections-service
    app.kubernetes.io/version: java17-latest
    app: rest-elections
    application: elections-service
    system: quarkus-elections
    app.openshift.io/runtime: quarkus
  name: rest-elections
spec:
  replicas: 1
  selector:
    app.kubernetes.io/part-of: elections-service
    app.kubernetes.io/version: java17-latest
    app.kubernetes.io/name: rest-elections
  template:
    metadata:
      annotations:
        prometheus.io/scheme: http
        app.openshift.io/vcs-url: https://github.com/joelapatatechaude/labororliberal
        app.openshift.io/connects-to: "elections-db-aro,elections-kafka,apicurio,rest-labors,rest-liberals,otel-collector"
        app.openshift.io/vcs-ref: main
        app.quarkus.io/build-timestamp: 2023-01-17 - 14:20:35 +0000
        prometheus.io/scrape: "true"
        prometheus.io/path: /q/metrics
        prometheus.io/port: "8082"
      labels:
        app: rest-elections
        application: elections-service
        system: quarkus-elections
        app.openshift.io/runtime: quarkus
        app.kubernetes.io/part-of: elections-service
        app.kubernetes.io/version: java17-latest
        app.kubernetes.io/name: rest-elections
    spec:
      containers:
        - env:
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          envFrom:
            - secretRef:
                name: rest-elections-config-creds
            - configMapRef:
                name: rest-elections-config
          image: rest-elections:java17-latest
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /q/health/live
              port: 8082
              scheme: HTTP
            initialDelaySeconds: 0
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 10
          name: rest-elections
          ports:
            - containerPort: 8082
              name: http
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /q/health/ready
              port: 8082
              scheme: HTTP
            initialDelaySeconds: 0
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 10
          resources:
            limits:
              memory: 768Mi
            requests:
              memory: 256Mi
  triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
          - rest-elections
        from:
          kind: ImageStreamTag
          name: rest-elections:java17-latest
      type: ImageChange
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/scheme: http
    app.openshift.io/vcs-url: https://github.com/joelapatatechaude/labororliberal
    app.openshift.io/connects-to: "elections-db-aro,elections-kafka,apicurio,rest-labors,rest-liberals,otel-collector"
    app.openshift.io/vcs-ref: main
    app.quarkus.io/build-timestamp: 2023-01-17 - 14:20:35 +0000
    prometheus.io/scrape: "true"
    prometheus.io/path: /q/metrics
    prometheus.io/port: "8082"
  labels:
    app.kubernetes.io/name: rest-elections
    app.kubernetes.io/part-of: elections-service
    app.kubernetes.io/version: java17-latest
    app: rest-elections
    application: elections-service
    system: quarkus-elections
    app.openshift.io/runtime: quarkus
  name: rest-elections
spec:
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 8082
  selector:
    app.kubernetes.io/name: rest-elections
    app.kubernetes.io/part-of: elections-service
    app.kubernetes.io/version: java17-latest
  type: ClusterIP
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  annotations:
    app.openshift.io/vcs-url: https://github.com/joelapatatechaude/labororliberal
    app.openshift.io/connects-to: "elections-db-aro,elections-kafka,apicurio,rest-labors,rest-liberals,otel-collector"
    app.openshift.io/vcs-ref: main
    app.quarkus.io/build-timestamp: 2023-01-17 - 14:20:35 +0000
  labels:
    app.kubernetes.io/name: rest-elections
    app.kubernetes.io/part-of: elections-service
    app.kubernetes.io/version: java17-latest
    app: rest-elections
    application: elections-service
    system: quarkus-elections
    app.openshift.io/runtime: quarkus
  name: rest-elections
spec:
  port:
    targetPort: http
  tls:
    termination: edge
  to:
    kind: Service
    name: rest-elections
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: election-statistics
    application: election-stats
    system: quarkus-elections
  name: election-statistics-config
data:
  kafka.bootstrap.servers: PLAINTEXT://elections-kafka:9092
  mp.messaging.connector.smallrye-kafka.apicurio.registry.url: http://apicurio:8080/apis/registry/v2
  quarkus.opentelemetry.tracer.exporter.otlp.endpoint: http://otel-collector:4317
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    app: election-statistics
    application: election-stats
    system: quarkus-elections
  name: election-statistics-config-creds
type: Opaque
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: elections-kafka
    application: elections-service
    app.kubernetes.io/part-of: elections-service
    app.openshift.io/runtime: amq
    system: quarkus-elections
  name: elections-kafka
spec:
  replicas: 1
  selector:
    matchLabels:
      name: elections-kafka
  template:
    metadata:
      labels:
        application: elections-service
        name: elections-kafka
        system: quarkus-elections
    spec:
      containers:
        - command:
            - sh
            - -c
            - "export CLUSTER_ID=$(bin/kafka-storage.sh random-uuid) && bin/kafka-storage.sh\
              \ format -t ${CLUSTER_ID} -c config/kraft/server.properties && bin/kafka-server-start.sh\
              \ config/kraft/server.properties --override advertised.listeners=${KAFKA_ADVERTISED_LISTENERS}"
          env:
            - name: LOG_DIR
              value: /tmp/logs
            - name: KAFKA_ADVERTISED_LISTENERS
              value: PLAINTEXT://elections-kafka:9092
          image: quay.io/strimzi/kafka:0.28.0-kafka-3.1.0
          name: elections-kafka
          ports:
            - containerPort: 9092
          resources:
            limits:
              memory: 768Mi
            requests:
              memory: 128Mi
---
apiVersion: v1
kind: Service
metadata:
  labels:
    name: elections-kafka
    application: elections-service
    system: quarkus-elections
  name: elections-kafka
spec:
  ports:
    - port: 9092
      protocol: TCP
      targetPort: 9092
  selector:
    name: elections-kafka
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/path: /metrics
    prometheus.io/port: "8080"
    prometheus.io/scheme: http
  labels:
    app: apicurio
    application: elections-service
    system: quarkus-elections
    app.kubernetes.io/part-of: elections-service
    app.kubernetes.io/name: apicurio
    app.kubernetes.io/version: 2.2.3.Final
    app.openshift.io/runtime: apicurio
  name: apicurio
spec:
  replicas: 1
  selector:
    matchLabels:
      name: apicurio
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: /metrics
        prometheus.io/port: "8080"
        prometheus.io/scheme: http
      labels:
        application: elections-service
        name: apicurio
        system: quarkus-elections
    spec:
      containers:
        - env:
            - name: REGISTRY_AUTH_ANONYMOUS_READ_ACCESS_ENABLED
              value: "true"
          image: quay.io/apicurio/apicurio-registry-mem:2.2.3.Final
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /health/live
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 0
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 10
          name: apicurio
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /health/ready
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 0
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 10
          resources:
            limits:
              memory: 768Mi
            requests:
              memory: 128Mi
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/path: /metrics
    prometheus.io/port: "8080"
    prometheus.io/scheme: http
  labels:
    name: apicurio
    application: elections-service
    system: quarkus-elections
  name: apicurio
spec:
  ports:
    - port: 8080
      protocol: TCP
      targetPort: 8080
  selector:
    name: apicurio
  type: ClusterIP
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/path: /metrics
    prometheus.io/port: "8080"
    prometheus.io/scheme: http
  labels:
    app: apicurio
    application: elections-service
    system: quarkus-elections
    app.openshift.io/runtime: apicurio
  name: apicurio
spec:
  port:
    targetPort: 8080
  tls:
    termination: edge
  to:
    kind: Service
    name: apicurio
---
apiVersion: image.openshift.io/v1
kind: ImageStream
metadata:
  annotations:
    app.openshift.io/vcs-url: https://github.com/joelapatatechaude/labororliberal
    app.openshift.io/connects-to: "elections-kafka,apicurio,otel-collector"
    app.openshift.io/vcs-ref: main
    app.quarkus.io/build-timestamp: 2023-01-17 - 14:20:51 +0000
  labels:
    app: election-statistics
    application: election-stats
    system: quarkus-elections
    app.openshift.io/runtime: quarkus
    app.kubernetes.io/name: election-statistics
    app.kubernetes.io/part-of: election-stats
    app.kubernetes.io/version: java17-latest
  name: election-statistics
spec:
  lookupPolicy:
    local: false
  tags:
    - from:
        kind: DockerImage
        name: quay.io/rh_ee_cschmitz/lol-election-statistics:java11-latest
      importPolicy: {}
      name: java11-latest
      referencePolicy:
        type: Source
    - from:
        kind: DockerImage
        name: quay.io/rh_ee_cschmitz/lol-election-statistics:java17-latest
      importPolicy: {}
      name: java17-latest
      referencePolicy:
        type: Source
    - from:
        kind: DockerImage
        name: quay.io/rh_ee_cschmitz/lol-election-statistics:native-latest
      importPolicy: {}
      name: native-latest
      referencePolicy:
        type: Source
---
apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  annotations:
    prometheus.io/scheme: http
    app.openshift.io/vcs-url: https://github.com/joelapatatechaude/labororliberal
    app.openshift.io/connects-to: "elections-kafka,apicurio,otel-collector"
    app.openshift.io/vcs-ref: main
    app.quarkus.io/build-timestamp: 2023-01-17 - 14:20:51 +0000
    prometheus.io/scrape: "true"
    prometheus.io/path: /q/metrics
    prometheus.io/port: "8085"
  labels:
    app.kubernetes.io/name: election-statistics
    app.kubernetes.io/part-of: election-stats
    app.kubernetes.io/version: java17-latest
    app: election-statistics
    application: election-stats
    system: quarkus-elections
    app.openshift.io/runtime: quarkus
  name: election-statistics
spec:
  replicas: 1
  selector:
    app.kubernetes.io/name: election-statistics
    app.kubernetes.io/part-of: election-stats
    app.kubernetes.io/version: java17-latest
  template:
    metadata:
      annotations:
        prometheus.io/scheme: http
        app.openshift.io/vcs-url: https://github.com/joelapatatechaude/labororliberal
        app.openshift.io/connects-to: "elections-kafka,apicurio,otel-collector"
        app.openshift.io/vcs-ref: main
        app.quarkus.io/build-timestamp: 2023-01-17 - 14:20:51 +0000
        prometheus.io/scrape: "true"
        prometheus.io/path: /q/metrics
        prometheus.io/port: "8085"
      labels:
        app: election-statistics
        application: election-stats
        system: quarkus-elections
        app.openshift.io/runtime: quarkus
        app.kubernetes.io/name: election-statistics
        app.kubernetes.io/part-of: election-stats
        app.kubernetes.io/version: java17-latest
    spec:
      containers:
        - env:
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          envFrom:
            - secretRef:
                name: election-statistics-config-creds
            - configMapRef:
                name: election-statistics-config
          image: election-statistics:java17-latest
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /q/health/live
              port: 8085
              scheme: HTTP
            initialDelaySeconds: 0
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 10
          name: election-statistics
          ports:
            - containerPort: 8085
              name: http
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /q/health/ready
              port: 8085
              scheme: HTTP
            initialDelaySeconds: 0
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 10
          resources:
            limits:
              memory: 768Mi
            requests:
              memory: 256Mi
  triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
          - election-statistics
        from:
          kind: ImageStreamTag
          name: election-statistics:java17-latest
      type: ImageChange
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/scheme: http
    app.openshift.io/vcs-url: https://github.com/joelapatatechaude/labororliberal
    app.openshift.io/connects-to: "elections-kafka,apicurio,otel-collector"
    app.openshift.io/vcs-ref: main
    app.quarkus.io/build-timestamp: 2023-01-17 - 14:20:51 +0000
    prometheus.io/scrape: "true"
    prometheus.io/path: /q/metrics
    prometheus.io/port: "8085"
  labels:
    app.kubernetes.io/name: election-statistics
    app.kubernetes.io/part-of: election-stats
    app.kubernetes.io/version: java17-latest
    app: election-statistics
    application: election-stats
    system: quarkus-elections
    app.openshift.io/runtime: quarkus
  name: election-statistics
spec:
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 8085
  selector:
    app.kubernetes.io/name: election-statistics
    app.kubernetes.io/part-of: election-stats
    app.kubernetes.io/version: java17-latest
  type: ClusterIP
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  annotations:
    app.openshift.io/vcs-url: https://github.com/joelapatatechaude/labororliberal
    app.openshift.io/connects-to: "elections-kafka,apicurio,otel-collector"
    app.openshift.io/vcs-ref: main
    app.quarkus.io/build-timestamp: 2023-01-17 - 14:20:51 +0000
  labels:
    app: election-statistics
    app.kubernetes.io/name: election-statistics
    app.kubernetes.io/part-of: election-stats
    app.kubernetes.io/version: java17-latest
    app.openshift.io/runtime: quarkus
    application: election-stats
    system: quarkus-elections
  name: election-statistics
spec:
  port:
    targetPort: http
  tls:
    termination: edge
  to:
    kind: Service
    name: election-statistics
    weight: 100
  wildcardPolicy: None
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: ui-elections
    application: elections
    system: quarkus-elections
    app.openshift.io/runtime: nodejs
    app.kubernetes.io/part-of: elections
  annotations:
    app.openshift.io/connects-to: rest-elections
    prometheus.io/scrape: "true"
    prometheus.io/path: /metrics
    prometheus.io/port: "8080"
    prometheus.io/scheme: http
  name: ui-elections
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ui-elections
      application: elections
  template:
    metadata:
      labels:
        app: ui-elections
        application: elections
        system: quarkus-elections
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: /metrics
        prometheus.io/port: "8080"
        prometheus.io/scheme: http
    spec:
      containers:
        - image: quay.io/rh_ee_cschmitz/lol-ui-elections:latest
          name: ui-elections
          imagePullPolicy: Always
          env:
            - name: CALCULATE_API_BASE_URL
              value: "true"
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 0
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 10
          ports:
            - containerPort: 8080
              protocol: TCP
              name: http
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 0
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 10
          resources:
            limits:
              memory: 128Mi
            requests:
              memory: 32Mi
---
apiVersion: v1
kind: Service
metadata:
  labels:
    name: ui-elections
    application: elections
    system: quarkus-elections
  name: ui-elections
spec:
  ports:
    - port: 80
      protocol: TCP
      targetPort: 8080
      name: http
  selector:
    app: ui-elections
    application: elections
  type: ClusterIP
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: ui-elections
  labels:
    app: ui-elections
    application: elections
    system: quarkus-elections
spec:
  to:
    kind: Service
    name: ui-elections
  port:
    targetPort: 8080
  tls:
    termination: edge
